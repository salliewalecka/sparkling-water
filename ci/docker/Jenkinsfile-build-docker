#!/usr/bin/groovy
@Library('test-shared-library') _

// Job parameters
properties(
        [
                parameters(
                        [
                                booleanParam(name: 'buildImage', defaultValue: false, description: 'Build Image'),
                                booleanParam(name: 'publishToHarbor', defaultValue: false, description: 'Publish To Harbor'),
                                booleanParam(name: 'publishToAWS', defaultValue: true, description: 'Publish To AWS'),
                                booleanParam(name: 'publishToAWSLastInHarbor', defaultValue: true, description: 'Publish To AWS the last image in harbor'),
                                booleanParam(name: 'updateNextImageVersion', defaultValue: false, description: 'Update Next Image Version'),

                        ]
                ),
                buildDiscarder(logRotator(numToKeepStr: '10'))
        ]
)

def getAWSRegistryId() {
    def line = readFile("ci/aws/terraform/terraform.tfstate").split("\n").find() { line ->
        line.contains("repository_url")
    }
    return line.substring("            \"repository_url\": \"".length()).split("\\.").first()
}

node('docker') {
    cleanWs()
    checkout scm
    def commons = load 'ci/commons.groovy'
    def currentVersion = commons.getDockerImageVersion()
    def nextVersion = currentVersion + 1
    commons.internalH2ODockerLogin()

    stage("Build Docker Image") {
        if (params.buildImage.toBoolean()) {
            sh "./gradlew :sparkling-water-ci:createDockerFile"
            dir("ci/build/docker") {
                sh """
                docker pull harbor.h2o.ai/opsh2oai/h2o-3-hadoop-hdp-2.2:76
                docker build -t harbor.h2o.ai/opsh2oai/sparkling_water_tests:${nextVersion} -f Dockerfile .
               """
            }
        }
    }

    stage("Publish Image to Harbor") {
        if (params.publishToHarbor.toBoolean()) {
            sh "docker push harbor.h2o.ai/opsh2oai/sparkling_water_tests:${nextVersion}"
        }
    }


    stage("Publish Image to AWS") {
        def id = nextVersion
        if (params.publishToAWSLastInHarbor.toBoolean()) {
            id = currentVersion
        }

        if (params.publishToAWS.toBoolean()) {
            commons.withAWSCredentials {
                def loginCommand = commons.withAWSCLI {
                    return sh(
                            script: "aws ecr get-login --region us-west-2 --no-include-email --registry-ids ${getAWSRegistryId()}",
                            returnStdout: true
                    ).trim()
                }
                def repoUrl = loginCommand.split(" ").last().replaceAll("https://", "")
                sh """
                    $loginCommand
                    docker pull harbor.h2o.ai/opsh2oai/sparkling_water_tests:${id}
                    docker tag harbor.h2o.ai/opsh2oai/sparkling_water_tests:${id} $repoUrl/opsh2oai/sparkling_water_tests:${id}
                    docker push $repoUrl/opsh2oai/sparkling_water_tests:${id}
                    """
            }
        }
    }

    stage("Update Next Image Version") {
        if (params.updateNextImageVersion.toBoolean()) {
                commons.withGit {
                def content = readFile("gradle.properties").replaceAll("dockerImageVersion=${currentVersion}", "dockerImageVersion=${nextVersion}")
                writeFile file: "gradle.properties", text: content
                commons.gitCommit(["gradle.properties"], "Update Docker Image Version")
            }
        }
    }
}
